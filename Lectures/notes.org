* [ Introduction ]
:::    2 people per NVIDIA jetson-nano card
:::    Book: Programming in parallell with CUDA

* [ ENIAC ]
**        [1] First famous computer, 5000 additions per second (FLOPS)
**        [2] Z1-Z3 (första av nazistera, hehe)

* [ Cray 1 ]
**        [1] 1975, kostade 40M dollar
**        [2] 5.5ton kg
**        [3] Performance: 160 MFLOPS

* [ Aurora ]
**        [1] Performance: 2EXAFLOPS (10^18)
**        [2] 10 Petabytes in RAM-minne
**        [3] cost 500 million dollars

* [ Jetson Nano Developer Kit ]
**        [1] CPU: 128 core Maxwell
**        [2] Quad-core ARM A57 @ 1.43 GHz
**        [3] 4GB 64-bit LPDDR4 25.6 GB/s
**        [4] microSD
**        [5] Camera: 2x MIPI CSI-2 DPHY lanes
**        [6] Gigabyte Ethernet, M.2 Key E
**        [7] 4x USB 3.0, USB 2.0 Micro-B
**        [8] GPIO, I2C, SPI, UART
**        [9] Mechanical: 69mm x 45mm, 260-pin edge connector
***    472 GFLOPS

* [ Computer Server Specification ]
**        [1] PCIe-buss, snabbt minne
**        [2] PSU, Hot-Plug (kan byta i drift), PowerSupply 2400W   
**        [3] 64 Cores, 128 Trådar
**        [4] L3-Cache minne - 256MB
**        [5] RAM 16 x 64 GB RDIMM (3200MT/s, dual-rank)
**        [6] Nvidia A100 PCIe 800GB, dualslot
**        [7] NVM (16x2 - non-volatile-memory)
**        [8] Ubuntu 22.04LTS

* [ FLOPS ]
:::    Floating operations per second

* [ Moores Law ]
**        [1] Transistor count gets doubled each year

* [ MMU: Memory Management Unit ]

* [ Architecture of a PC ]
**        [1] CPU
**        [2] PCI-E
**        [3] RAM
:::    1-3 communicates with NORTHBRIDGE which communicates with South Bridge

* [ RISC and CISC ]
:::    Buffer Shift (pga dela med två eller multiplicera)
:::    PC (ProgramCounter) = Vilken minnesplats nästa instruktion ska läsas på
***    CISC: 1 instructions = N micro-instructions
***    RISC: IR (instruction register), en instruktion i taget: PC->IR->Decoder
:::    Pipelining: Så fort du tagit fram ett delresultat, kan du ändra på det

* [ Flynns Taxonomy ]
:::    SISD(Single Instruction - Single Data) - Processor
:::    MISD(Multiple Instruction - Single Data)
:::    SIMD(Single Instruction - Multiple Data) - GPU
:::    MIMD(Multiple Instruction - Multiple Data)

***    Vectorized code: More in the future.


